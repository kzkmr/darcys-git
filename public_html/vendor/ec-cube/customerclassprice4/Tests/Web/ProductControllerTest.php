<?php
/**
 * This file is part of CustomerClassPrice4
 *
 * Copyright(c) Akira Kurozumi <info@a-zumi.net>
 *
 * https://a-zumi.net
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\CustomerClassPrice4\Tests\Web;


use Eccube\Common\Constant;
use Eccube\Common\EccubeConfig;
use Eccube\Entity\Customer;
use Eccube\Entity\Master\RoundingType;
use Eccube\Entity\Product;
use Eccube\Entity\ProductClass;
use Eccube\Repository\Master\RoundingTypeRepository;
use Eccube\Repository\ProductClassRepository;
use Eccube\Service\TaxRuleService;
use Eccube\Twig\Extension\EccubeExtension;
use Plugin\CustomerClassPrice4\Entity\Config;
use Plugin\CustomerClassPrice4\Entity\CustomerClass;
use Plugin\CustomerClassPrice4\Repository\ConfigRepository;
use Plugin\CustomerClassPrice4\Service\CustomerClassPriceHelper;
use Plugin\CustomerClassPrice4\Service\DiscountHelper;

class ProductControllerTest extends AbstractWebTestCase
{
    /**
     * @var Customer
     */
    protected $Customer;

    /**
     * @var CustomerClass
     */
    protected $CustomerClass;

    /**
     * @var Product
     */
    protected $Product;

    /**
     * @var TaxRuleService
     */
    protected $TaxRuleService;

    /**
     * @var DiscountHelper
     */
    protected $DiscountHelper;

    /**
     * @var RoundingTypeRepository
     */
    protected $RoundingTypeRepository;

    /**
     * @var ConfigRepository
     */
    protected $ConfigRepository;

    /**
     * @var ProductClassRepository
     */
    protected $ProductClassRepository;

    /**
     * @var EccubeExtension
     */
    protected $Extension;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->Customer = $this->createCustomer();
        $this->CustomerClass = $this->createCustomerClass();

        $container = self::$kernel->getContainer();
        $this->TaxRuleService = $container->get(TaxRuleService::class);
        $this->RoundingTypeRepository = $this->entityManager->getRepository(RoundingType::class);
        $this->ConfigRepository = $this->entityManager->getRepository(Config::class);
        $this->ProductClassRepository = $this->entityManager->getRepository(ProductClass::class);

        $EccubeConfig = $container->get(EccubeConfig::class);
        $productRepository = $this->entityManager->getRepository(Product::class);
        $this->Extension = new EccubeExtension($EccubeConfig, $productRepository);

        $customerClassPriceHelper = new CustomerClassPriceHelper($container);

        $this->DiscountHelper = new DiscountHelper(
            $this->entityManager,
            $customerClassPriceHelper
        );
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test商品詳細ページで会員種別価格が表示されるか()
    {
        $customerClassPrice = 1000;

        /** @var Product $Product */
        $Product = $this->createProduct(null, 0);
        $Product->setPlgCcpEnabledDiscount(true);

        $this->Customer->setPlgCcpCustomerClass($this->CustomerClass);
        $this->createCustomerClassPrice($this->CustomerClass, $Product->getProductClasses()->first(), $customerClassPrice);

        $this->loginTo($this->Customer);

        // 一度アクセスしてキャッシュクリアする
        $this->client->request('GET', $this->generateUrl('homepage'));

        $crawler = $this->client->request('GET', $this->generateUrl('product_detail', ['id' => $Product->getId()]));

        $customerClassPriceInTax = $this->TaxRuleService->getPriceIncTax($customerClassPrice);
        self::assertContains(number_format($customerClassPriceInTax), $crawler->filter('.ec-price__price')->text());

    }

    public function test商品詳細ページで設定した割引率の価格が表示されるか()
    {
        $dicountRate = 50;

        /** @var Product $Product */
        $Product = $this->createProduct(null, 0);
        $Product->setPlgCcpEnabledDiscount(true);
        $Product->getProductClasses()->first()->setPrice02(1000);
        $this->entityManager->persist($Product);
        $this->entityManager->flush();

        $this->CustomerClass->setDiscountRate($dicountRate);

        /** @var Customer $Customer */
        $Customer = $this->createCustomer();
        $Customer->setPlgCcpCustomerClass($this->CustomerClass);
        $this->entityManager->persist($Customer);
        $this->entityManager->flush();

        $this->loginTo($Customer);

        // 一度アクセスしてキャッシュクリアする
        $this->client->request('GET', $this->generateUrl('homepage'));

        $crawler = $this->client->request('GET', $this->generateUrl('product_detail', ['id' => $Product->getId()]));

        $discountPriceInTax = $this->TaxRuleService->getPriceIncTax($Product->getProductClasses()->first()->getPrice02() * ($dicountRate / 100));
        self::assertContains(number_format($discountPriceInTax), $crawler->filter('.ec-price__price')->text());
    }

    public function test割引率価格設定の場合四捨五入された割引価格が表示されるか()
    {
        $dicountRate = 49;

        /** @var Product $Product */
        $Product = $this->createProduct(null, 0);
        $Product->setPlgCcpEnabledDiscount(true);
        $Product->getProductClasses()->first()->setPrice02(1000);
        $this->entityManager->persist($Product);
        $this->entityManager->flush();

        $this->CustomerClass->setDiscountRate($dicountRate);

        /** @var Customer $Customer */
        $Customer = $this->createCustomer();
        $Customer->setPlgCcpCustomerClass($this->CustomerClass);
        $this->entityManager->persist($Customer);
        $this->entityManager->flush();

        $this->loginTo($Customer);

        // 一度アクセスしてキャッシュクリアする
        $this->client->request('GET', $this->generateUrl('homepage'));

        $crawler = $this->client->request('GET', $this->generateUrl('product_detail', ['id' => $Product->getId()]));

        $Price = $this->DiscountHelper->calculatePrice($Product->getProductClasses()->first()->getPrice02(), $Customer);
        $discountPriceInTax = $this->TaxRuleService->getPriceIncTax($Price);
        self::assertContains(number_format($discountPriceInTax), $crawler->filter('.ec-price__price')->text());
    }

    public function test割引率価格設定の場合切り捨てされた割引価格が表示されるか()
    {
        $dicountRate = 49;

        $RoundingType = $this->RoundingTypeRepository->find(RoundingType::FLOOR);

        /** @var Config $Config */
        $Config = $this->ConfigRepository->find(1);
        $Config->setRoundingType($RoundingType);
        $this->entityManager->persist($Config);
        $this->entityManager->flush();

        /** @var Product $Product */
        $Product = $this->createProduct(null, 0);
        $Product->setPlgCcpEnabledDiscount(true);
        $Product->getProductClasses()->first()->setPrice02(1000);
        $this->entityManager->persist($Product);
        $this->entityManager->flush();

        $this->CustomerClass->setDiscountRate($dicountRate);

        /** @var Customer $Customer */
        $Customer = $this->createCustomer();
        $Customer->setPlgCcpCustomerClass($this->CustomerClass);
        $this->entityManager->persist($Customer);
        $this->entityManager->flush();

        $this->loginTo($Customer);

        // 一度アクセスしてキャッシュクリアする
        $this->client->request('GET', $this->generateUrl('homepage'));

        $crawler = $this->client->request('GET', $this->generateUrl('product_detail', ['id' => $Product->getId()]));

        $Price = $this->DiscountHelper->calculatePrice($Product->getProductClasses()->first()->getPrice02(), $Customer);

        $discountPriceInTax = $this->TaxRuleService->getPriceIncTax($Price);
        self::assertContains(number_format($discountPriceInTax), $crawler->filter('.ec-price__price')->text());
    }

    public function test割引率価格設定の場合切り上げされた割引価格が表示されるか()
    {
        $dicountRate = 49;

        $RoundingType = $this->RoundingTypeRepository->find(RoundingType::CEIL);

        /** @var Config $Config */
        $Config = $this->ConfigRepository->find(1);
        $Config->setRoundingType($RoundingType);
        $this->entityManager->persist($Config);
        $this->entityManager->flush();

        /** @var Product $Product */
        $Product = $this->createProduct(null, 0);
        $Product->setPlgCcpEnabledDiscount(true);
        $Product->getProductClasses()->first()->setPrice02(1000);
        $this->entityManager->persist($Product);
        $this->entityManager->flush();

        $this->CustomerClass->setDiscountRate($dicountRate);

        /** @var Customer $Customer */
        $Customer = $this->createCustomer();
        $Customer->setPlgCcpCustomerClass($this->CustomerClass);
        $this->entityManager->persist($Customer);
        $this->entityManager->flush();

        $this->loginTo($Customer);

        // 一度アクセスしてキャッシュクリアする
        $this->client->request('GET', $this->generateUrl('homepage'));

        $crawler = $this->client->request('GET', $this->generateUrl('product_detail', ['id' => $Product->getId()]));

        $Price = $this->DiscountHelper->calculatePrice($Product->getProductClasses()->first()->getPrice02(), $Customer);

        $discountPriceInTax = $this->TaxRuleService->getPriceIncTax($Price);
        self::assertContains(number_format($discountPriceInTax), $crawler->filter('.ec-price__price')->text());
    }

    public function test特定会員価格が表示されたユーザーが商品をカートに入れたとき、販売価格が税込みの特定会員価格になっているか()
    {
        $customerClassPrice = 1000;

        /** @var Product $Product */
        $Product = $this->createProduct(null, 0);
        $Product->setPlgCcpEnabledDiscount(true);

        $this->Customer->setPlgCcpCustomerClass($this->CustomerClass);
        $this->createCustomerClassPrice($this->CustomerClass, $Product->getProductClasses()->first(), $customerClassPrice);

        $this->loginTo($this->Customer);

        // 一度アクセスしてキャッシュクリアする
        $this->client->request('GET', $this->generateUrl('homepage'));

        $ProductClass = $Product->getProductClasses()->first();
        $product_class_id = $ProductClass->getId();

        // カートに入れる
        $this->client->request(
            'PUT',
            $this->generateUrl(
                'cart_handle_item',
                [
                    'operation' => 'up',
                    'productClassId' => $product_class_id,
                ]
            ),
            [Constant::TOKEN_NAME => '_dummy']
        );

        $crawler = $this->client->request(
            'GET',
            $this->generateUrl('cart')
        );

        $customerClassPriceInTax = $this->TaxRuleService->getPriceIncTax($customerClassPrice, $Product, $ProductClass);
        $cartUnitPrice = $crawler->filter(".ec-cartRow__unitPrice")->text();

        self::assertEquals($this->Extension->getPriceFilter($customerClassPriceInTax), $cartUnitPrice);
    }
}
