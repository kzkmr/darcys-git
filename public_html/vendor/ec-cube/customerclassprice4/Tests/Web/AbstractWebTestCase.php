<?php
/**
 * This file is part of CustomerClassPrice4
 *
 * Copyright(c) Akira Kurozumi <info@a-zumi.net>
 *
 * https://a-zumi.net
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\CustomerClassPrice4\Tests\Web;


use Eccube\Common\Constant;
use Eccube\Entity\Customer;
use Eccube\Entity\ProductClass;
use Eccube\Service\TaxRuleService;
use Plugin\CustomerClassPrice4\Doctrine\EventListener\CustomerClassPriceEventListener;
use Plugin\CustomerClassPrice4\Entity\CustomerClass;
use Plugin\CustomerClassPrice4\Entity\CustomerClassPrice;
use Plugin\CustomerClassPrice4\Service\CustomerClassPriceHelper;
use Plugin\CustomerClassPrice4\Service\DiscountHelper;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage;
use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;

class AbstractWebTestCase extends \Eccube\Tests\Web\AbstractWebTestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function createCustomerFormData()
    {
        $faker = $this->getFaker();
        $email = $faker->safeEmail;
        $password = $faker->lexify('????????');
        $birth = $faker->dateTimeBetween;

        $form = [
            'name' => ['name01' => $faker->lastName, 'name02' => $faker->firstName],
            'kana' => ['kana01' => $faker->lastKanaName, 'kana02' => $faker->firstKanaName],
            'company_name' => $faker->company,
            'postal_code' => $faker->postcode,
            'address' => ['pref' => '5', 'addr01' => $faker->city, 'addr02' => $faker->streetAddress],
            'phone_number' => $faker->phoneNumber,
            'email' => $email,
            'password' => ['first' => $password, 'second' => $password],
            'birth' => $birth->format('Y').'-'.$birth->format('n').'-'.$birth->format('j'),
            'sex' => 1,
            'job' => 1,
            'status' => 1,
            'point' => 0,
            Constant::TOKEN_NAME => 'dummy',
        ];

        return $form;
    }

    public function createProductFormData()
    {
        $faker = $this->getFaker();

        $price01 = $faker->randomNumber(5);
        if (mt_rand(0, 1)) {
            $price01 = number_format($price01);
        }

        $price02 = $faker->randomNumber(5);
        if (mt_rand(0, 1)) {
            $price02 = number_format($price02);
        }

        $form = [
            'class' => [
                'sale_type' => 1,
                'price01' => $price01,
                'price02' => $price02,
                'stock' => $faker->randomNumber(3),
                'stock_unlimited' => 0,
                'code' => $faker->word,
                'sale_limit' => null,
                'delivery_duration' => '',
            ],
            'name' => $faker->word,
            'product_image' => [],
            'description_detail' => $faker->realText,
            'description_list' => $faker->paragraph,
            'Category' => null,
            'Tag' => 1,
            'search_word' => $faker->word,
            'free_area' => $faker->realText,
            'Status' => 1,
            'note' => $faker->realText,
            'tags' => null,
            'images' => null,
            'add_images' => null,
            'delete_images' => null,
            Constant::TOKEN_NAME => 'dummy',
        ];

        return $form;
    }

    public function createCustomerClass()
    {
        $CustomerClass = new CustomerClass();
        $CustomerClass->setName('特定会員');
        $this->entityManager->persist($CustomerClass);
        $this->entityManager->flush();

        return $CustomerClass;
    }

    public function createCustomerClassPrice(CustomerClass $customerClass, ProductClass $productClass, int $price)
    {
        $CustomerClassPrice = new CustomerClassPrice();
        $CustomerClassPrice->setCustomerClass($customerClass);
        $CustomerClassPrice->setProductClass($productClass);
        $CustomerClassPrice->setPrice($price);
        $this->entityManager->persist($CustomerClassPrice);
        $this->entityManager->flush();

        return $CustomerClassPrice;
    }
}
