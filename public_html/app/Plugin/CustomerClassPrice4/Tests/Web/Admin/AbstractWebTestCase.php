<?php
/**
 * This file is part of CustomerClassPrice4
 *
 * Copyright(c) Akira Kurozumi <info@a-zumi.net>
 *
 * https://a-zumi.net
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\CustomerClassPrice4\Tests\Web\Admin;


use Eccube\Common\Constant;
use Eccube\Entity\Customer;
use Eccube\Entity\Master\OrderStatus;
use Eccube\Entity\Order;
use Eccube\Entity\OrderItem;
use Eccube\Entity\Product;
use Eccube\Entity\Shipping;
use Eccube\Tests\Web\Admin\AbstractAdminWebTestCase;
use Plugin\CustomerClassPrice4\Entity\CustomerClass;

class AbstractWebTestCase extends AbstractAdminWebTestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @return CustomerClass
     */
    public function createCustomerClass()
    {
        $CustomerClass = new CustomerClass();
        $CustomerClass->setName('特定会員');
        $this->entityManager->persist($CustomerClass);
        $this->entityManager->flush();

        return $CustomerClass;
    }

    /**
     * @return array
     */
    public function createCustomerFormData()
    {
        $faker = $this->getFaker();
        $email = $faker->safeEmail;
        $password = $faker->lexify('????????');
        $birth = $faker->dateTimeBetween;

        $form = [
            'name' => ['name01' => $faker->lastName, 'name02' => $faker->firstName],
            'kana' => ['kana01' => $faker->lastKanaName, 'kana02' => $faker->firstKanaName],
            'company_name' => $faker->company,
            'postal_code' => $faker->postcode,
            'address' => ['pref' => '5', 'addr01' => $faker->city, 'addr02' => $faker->streetAddress],
            'phone_number' => $faker->phoneNumber,
            'email' => $email,
            'password' => ['first' => $password, 'second' => $password],
            'birth' => $birth->format('Y') . '-' . $birth->format('n') . '-' . $birth->format('j'),
            'sex' => 1,
            'job' => 1,
            'status' => 1,
            'point' => 0,
            Constant::TOKEN_NAME => 'dummy',
        ];

        return $form;
    }

    /**
     * @return array
     */
    public function createProductFormData()
    {
        $faker = $this->getFaker();

        $price01 = $faker->randomNumber(5);
        if (mt_rand(0, 1)) {
            $price01 = number_format($price01);
        }

        $price02 = $faker->randomNumber(5);
        if (mt_rand(0, 1)) {
            $price02 = number_format($price02);
        }

        $form = [
            'class' => [
                'sale_type' => 1,
                'price01' => $price01,
                'price02' => $price02,
                'stock' => $faker->randomNumber(3),
                'stock_unlimited' => 0,
                'code' => $faker->word,
                'sale_limit' => null,
                'delivery_duration' => '',
            ],
            'name' => $faker->word,
            'product_image' => [],
            'description_detail' => $faker->realText,
            'description_list' => $faker->paragraph,
            'Category' => null,
            'Tag' => 1,
            'search_word' => $faker->word,
            'free_area' => $faker->realText,
            'Status' => 1,
            'note' => $faker->realText,
            'tags' => null,
            'images' => null,
            'add_images' => null,
            'delete_images' => null,
            Constant::TOKEN_NAME => 'dummy',
        ];

        return $form;
    }

    /**
     * 受注編集用フォーム作成.
     *
     * @param Customer $Customer
     * @param Product $Product
     *
     * @return array
     */
    public function createOrderFormData(Customer $Customer, Product $Product = null)
    {
        $faker = $this->getFaker();
        $email = $faker->safeEmail;

        $shipping = $this->createShippingFormData();
        $orderItems = $this->createOrderItemFormData($Product);

        $order = [
            '_token' => 'dummy',
            'Customer' => $Customer->getId(),
            'OrderStatus' => OrderStatus::IN_PROGRESS,
            'name' => [
                'name01' => $faker->lastName,
                'name02' => $faker->firstName,
            ],
            'kana' => [
                'kana01' => $faker->lastKanaName,
                'kana02' => $faker->firstKanaName,
            ],
            'company_name' => $faker->company,
            'postal_code' => $faker->postcode,
            'address' => [
                'pref' => '5',
                'addr01' => $faker->city,
                'addr02' => $faker->streetAddress,
            ],
            'phone_number' => $faker->phoneNumber,
            'email' => $email,
            'message' => $faker->realText,
            'Payment' => 1,     // XXX ハードコーディング
            'discount' => 0,
            'delivery_fee_total' => 0,
            'charge' => 0,
            'note' => $faker->realText,
            'OrderItems' => $orderItems,
            'use_point' => 0,
            'Shipping' => $shipping,
        ];

        return $order;
    }

    /**
     * 配送編集用フォーム作成.
     *
     * @param Product $Product
     *
     * @return array
     */
    public function createShippingFormData(Product $Product = null)
    {
        $faker = $this->getFaker();

        $shipping = [
            'name' => [
                'name01' => $faker->lastName,
                'name02' => $faker->firstName,
            ],
            'kana' => [
                'kana01' => $faker->lastKanaName,
                'kana02' => $faker->firstKanaName,
            ],
            'postal_code' => $faker->postcode,
            'address' => [
                'pref' => '5',
                'addr01' => $faker->city,
                'addr02' => $faker->streetAddress,
            ],
            'phone_number' => $faker->phoneNumber,
            'Delivery' => 1,
        ];

        if ($Product) {
            $shipping['OrderItems'] = $this->createOrderItemFormData($Product);
        }

        return $shipping;
    }

    /**
     * @param Product $Product
     *
     * @return array
     */
    public function createOrderItemFormData(Product $Product)
    {
        $faker = $this->getFaker();

        $orderItems = [];
        if (is_object($Product)) {
            $ProductClasses = $Product->getProductClasses();
            $orderItems[] = [
                'ProductClass' => $ProductClasses[0]->getId(),
                'price' => $ProductClasses[0]->getPrice02(),
                'quantity' => $faker->numberBetween(1, 9),
                'product_name' => $Product->getName(),
                'order_item_type' => 1,
            ];
        }

        return $orderItems;
    }

    /**
     * 受注再編集用フォーム作成.
     *
     * @param Order $Order
     *
     * @return array
     */
    public function createFormDataForEdit(Order $Order)
    {
        //受注アイテム
        $orderItem = $this->createOrderItemsFormDataEdit($Order->getOrderItems());

        $Customer = $Order->getCustomer();
        $customer_id = null;
        if (is_object($Customer)) {
            $customer_id = $Customer->getId();
        }

        $Shipping = $Order->getShippings()[0];

        $shipping = $this->createShippingFormDataForEdit($Shipping);

        //受注フォーム
        $order = [
            '_token' => 'dummy',
            'OrderStatus' => (string)$Order->getOrderStatus()->getId(),
            'Customer' => (string)$customer_id,
            'name' => [
                'name01' => $Order->getName01(),
                'name02' => $Order->getName02(),
            ],
            'kana' => [
                'kana01' => $Order->getKana01(),
                'kana02' => $Order->getKana02(),
            ],
            'postal_code' => $Order->getPostalCode(),
            'address' => [
                'pref' => $Order->getPref()->getId(),
                'addr01' => $Order->getAddr01(),
                'addr02' => $Order->getAddr02(),
            ],
            'email' => $Order->getEmail(),
            'phone_number' => $Order->getPhoneNumber(),
            'company_name' => $Order->getCompanyName(),
            'message' => $Order->getMessage(),
            'OrderItems' => $orderItem,
            'discount' => $Order->getDiscount(),
            'delivery_fee_total' => $Order->getDeliveryFeeTotal(),
            'charge' => $Order->getCharge(),
            'Payment' => $Order->getPayment()->getId(),
            'note' => $Order->getNote(),
            'use_point' => 0,
            'Shipping' => $shipping,
        ];

        return $order;
    }

    /**
     * 受注再編集用フォーム作成.
     *
     * @param Shipping $Shipping
     *
     * @return array
     */
    public function createShippingFormDataForEdit(Shipping $Shipping)
    {
        $shipping = [
            'name' => [
                'name01' => $Shipping->getName01(),
                'name02' => $Shipping->getName02(),
            ],
            'kana' => [
                'kana01' => $Shipping->getKana01(),
                'kana02' => $Shipping->getKana02(),
            ],
            'postal_code' => $Shipping->getPostalCode(),
            'address' => [
                'pref' => $Shipping->getPref()->getId(),
                'addr01' => $Shipping->getAddr01(),
                'addr02' => $Shipping->getAddr02(),
            ],
            'phone_number' => $Shipping->getPhoneNumber(),
            'Delivery' => 1,
        ];

        if ($Shipping->getOrderItems()) {
            $shipping['OrderItems'] = $this->createOrderItemsFormDataEdit($Shipping->getOrderItems());
        }

        return $shipping;
    }

    /**
     * @return array
     */
    public function createOrderItemsFormDataEdit($OrderItems)
    {
        $orderItem = [];

        /** @var OrderItem $OrderItem */
        foreach ($OrderItems as $OrderItem) {
            $Product = $OrderItem->getProduct();
            $ProductClass = $OrderItem->getProductClass();
            $orderItem[] = [
                'ProductClass' => is_object($ProductClass) ? $ProductClass->getId() : null,
                'price' => $OrderItem->getPrice(),
                'quantity' => $OrderItem->getQuantity(),
                'product_name' => is_object($Product) ? $Product->getName() : '送料',
                // XXX v3.1 より 送料等, Product の無い明細が追加される
                'order_item_type' => $OrderItem->getOrderItemTypeId(),
            ];
        }

        return $orderItem;
    }
}
