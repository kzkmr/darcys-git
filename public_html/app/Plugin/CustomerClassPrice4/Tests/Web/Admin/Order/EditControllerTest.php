<?php
/**
 * This file is part of CustomerClassPrice4
 *
 * Copyright(c) Akira Kurozumi <info@a-zumi.net>
 *
 * https://a-zumi.net
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\CustomerClassPrice4\Tests\Web\Admin\Order;


use Eccube\Entity\Master\OrderStatus;
use Eccube\Entity\Order;
use Eccube\Repository\OrderRepository;
use Plugin\CustomerClassPrice4\Entity\CustomerClass;
use Plugin\CustomerClassPrice4\Tests\Web\Admin\AbstractWebTestCase;

class EditControllerTest extends AbstractWebTestCase
{
    /**
     * @var CustomerClass
     */
    protected $customerClass;

    /**
     * @var OrderRepository
     */
    protected $orderRepository;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->customerClass = $this->createCustomerClass();

        $this->orderRepository = $this->entityManager->getRepository(Order::class);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test新規受注登録ページが表示されるか()
    {
        $this->client->request('GET', $this->generateUrl('admin_order_new'));
        self::assertTrue($this->client->getResponse()->isSuccessful());
    }

    public function test新規受注登録()
    {
        $Customer = $this->createCustomer();
        $Product = $this->createProduct();

        $formData = $this->createOrderFormData($Customer, $Product);
        $formData['plgCcpCustomerClass'] = $this->customerClass->getId();
        unset($formData['OrderStatus']);

        $crawler = $this->client->request(
            'POST',
            $this->generateUrl('admin_order_new'),
            [
                'order' => $formData,
                'mode' => 'register',
            ]
        );

        $url = $crawler->filter('a')->text();
        $this->assertTrue($this->client->getResponse()->isRedirect($url));

        // customer_class_id がセットされているか確認
        /** @var Order[] $Orders */
        $Orders = $this->orderRepository->findBy([], ['create_date' => 'DESC']);
        self::assertNotNull($Orders[0]->getPlgCcpCustomerClass());
    }

    public function test受注編集ページが表示されるか()
    {
        $Customer = $this->createCustomer();
        $Order = $this->createOrder($Customer);
        $Order->setPlgCcpCustomerClass($this->customerClass);
        $this->entityManager->persist($Order);
        $this->entityManager->flush();

        $this->client->request('GET', $this->generateUrl('admin_order_edit', ['id' => $Order->getId()]));
        self::assertTrue($this->client->getResponse()->isSuccessful());

    }

    public function test受注編集ページで会員種別を登録できるか()
    {
        $Customer = $this->createCustomer();
        $Product = $this->createProduct();
        $Order = $this->createOrder($Customer);
        $Order->setOrderStatus($this->entityManager->find(OrderStatus::class, OrderStatus::NEW));
        $this->entityManager->persist($Order);
        $this->entityManager->flush();

        $formData = $this->createOrderFormData($Customer, $Product);
        $formData['plgCcpCustomerClass'] = $this->customerClass->getId();

        $this->client->request(
            'POST',
            $this->generateUrl('admin_order_edit', ['id' => $Order->getId()]),
            [
                'order' => $formData,
                'mode' => 'register',
            ]
        );
        self::assertTrue($this->client->getResponse()->isRedirect($this->generateUrl('admin_order_edit', ['id' => $Order->getId()])));

        /** @var Order $EditedOrder */
        $EditedOrder = $this->orderRepository->find($Order->getId());

        $this->expected = $formData['plgCcpCustomerClass'];
        $this->actual = $EditedOrder->getPlgCcpCustomerClass()->getId();
        $this->verify();
    }
}
