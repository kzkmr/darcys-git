<?php
/**
 * This file is part of CustomerClassPrice4
 *
 * Copyright(c) Akira Kurozumi <info@a-zumi.net>
 *
 * https://a-zumi.net
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\CustomerClassPrice4\Tests\Web;


use Eccube\Common\Constant;
use Eccube\Common\EccubeConfig;
use Eccube\Entity\ProductClass;
use Eccube\Service\TaxRuleService;
use Eccube\Tests\Web\AbstractShoppingControllerTestCase;
use Plugin\CustomerClassPrice4\Entity\CustomerClass;
use Plugin\CustomerClassPrice4\Entity\CustomerClassPrice;

class ShoppingControllerWithMultipleTest extends AbstractShoppingControllerTestCase
{
    /**
     * @var EccubeConfig
     */
    protected $eccubeConfig;

    /**
     * @var TaxRuleService
     */
    protected $taxRuleService;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $container = self::$kernel->getContainer();

        $this->eccubeConfig = $container->get(EccubeConfig::class);
        $this->taxRuleService = $container->get(TaxRuleService::class);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test会員種別が設定された会員が複数配送画面で配送先を変更して価格が変更されないか()
    {
        $price = 1000;

        $customerClass = $this->createCustomerClass();

        $customer = $this->createCustomer();
        $customer->addCustomerAddress($this->createCustomerAddress($customer));
        $customer->setPlgCcpCustomerClass($customerClass);

        $product = $this->createProduct();
        /** @var ProductClass $productClass */
        $productClass = $product->getProductClasses()->first();

        $customerClassPrice = $this->createCustomerClassPrice($customerClass, $productClass, $price);
        $productClass->addPlgCcpCustomerClassPrice($customerClassPrice);

        // カート画面
        $this->scenarioCartIn($customer, $productClass->getId());

        // 確認画面
        $crawler = $this->scenarioConfirm($customer);
        $this->expected = 'ご注文手続き';
        $this->actual = $crawler->filter('div.ec-pageHeader h1')->text();
        $this->verify();

        // 複数配送画面
        $crawler = $this->client->request('GET', $this->generateUrl('shopping_shipping_multiple'));

        // 配送先情報を返す
        $shippings = $crawler->filter('#form_shipping_multiple_0_shipping_0_customer_address > option')->each(
            function ($node, $i) {
                return [
                    'customer_address' => $node->attr('value'),
                    'quantity' => 1,
                ];
            }
        );

        $this->client->followRedirects();
        $crawler = $this->client->request(
            'POST',
            $this->generateUrl('shopping_shipping_multiple'),
            ['form' => [
                'shipping_multiple' => [0 => [
                    // 配送先1, 配送先2 の 情報を渡す
                    'shipping' => [$shippings[0]],
                ],
                ],
                Constant::TOKEN_NAME => 'dummy',
            ],
            ]
        );

        $this->expected = $this->formatCurrency($this->taxRuleService->getPriceIncTax($price));
        $this->actual = $crawler->filter('dd.ec-totalBox__specTotal')->text();
        $this->verify();
    }

    public function createCustomerClass()
    {
        $customerClass = new CustomerClass();
        $customerClass->setName('会員種別');
        $this->entityManager->persist($customerClass);
        $this->entityManager->flush();

        return $customerClass;
    }

    public function createCustomerClassPrice(CustomerClass $customerClass, ProductClass $productClass, int $price)
    {
        $customerClassPrice = new CustomerClassPrice();
        $customerClassPrice->setCustomerClass($customerClass);
        $customerClassPrice->setProductClass($productClass);
        $customerClassPrice->setPrice($price);
        $this->entityManager->persist($customerClassPrice);
        $this->entityManager->flush();

        return $customerClassPrice;
    }

    /**
     * @param $number
     * @param int $decimals
     * @param string $decPoint
     * @param string $thousandsSep
     * @return string
     */
    public function formatCurrency($number, $decimals = 0, $decPoint = '.', $thousandsSep = ',')
    {
        $locale = $this->eccubeConfig['locale'];
        $currency = $this->eccubeConfig['currency'];
        $formatter = new \NumberFormatter($locale, \NumberFormatter::CURRENCY);

        return $formatter->formatCurrency($number, $currency);
    }
}
