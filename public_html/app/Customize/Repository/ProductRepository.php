<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Customize\Repository;

use Eccube\Repository\AbstractRepository;
use Eccube\Repository\QueryKey;
use Customize\Repository\Master\ContractTypeRepository;
use Eccube\Repository\ProductRepository as BaseProductRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Eccube\Common\EccubeConfig;
use Eccube\Doctrine\Query\Queries;
use Eccube\Entity\Product;
use Eccube\Entity\ProductStock;
use Eccube\Util\StringUtil;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends AbstractRepository
{
    /**
     * @var Queries
     */
    protected $queries;

    /**
     * @var EccubeConfig
     */
    protected $eccubeConfig;

    /**
     * @var BaseProductRepository
     */
    protected $baseProductRepository;

    /**
     * @var ContractTypeRepository
     */
    protected $contractTypeRepository;

    /**
     * ProductRepository constructor.
     *
     * @param RegistryInterface $registry
     * @param Queries $queries
     * @param EccubeConfig $eccubeConfig
     */
    public function __construct(
        RegistryInterface $registry,
        Queries $queries,
        EccubeConfig $eccubeConfig,
        BaseProductRepository $baseProductRepository,
        ContractTypeRepository $contractTypeRepository
    ) {
        parent::__construct($registry, Product::class);
        $this->queries = $queries;
        $this->eccubeConfig = $eccubeConfig;
        $this->baseProductRepository = $baseProductRepository;
        $this->contractTypeRepository = $contractTypeRepository;
    }

    /**
     * get query builder.
     *
     * @param  array $searchData
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getQueryBuilderBySearchDataWithLoginTypeInfo($searchData, array $LoginTypeInfo)
    {
        $qb = $this->createQueryBuilder('p')
            ->andWhere('p.Status = 1');

        // category
        $categoryJoin = false;
        if (!empty($searchData['category_id']) && $searchData['category_id']) {
            $Categories = $searchData['category_id']->getSelfAndDescendants();
            if ($Categories) {
                $qb
                    ->innerJoin('p.ProductCategories', 'pct')
                    ->innerJoin('pct.Category', 'c')
                    ->andWhere($qb->expr()->in('pct.Category', ':Categories'))
                    ->setParameter('Categories', $Categories);
                $categoryJoin = true;
            }
        }

        // name
        if (isset($searchData['name']) && StringUtil::isNotBlank($searchData['name'])) {
            $keywords = preg_split('/[\s　]+/u', str_replace(['%', '_'], ['\\%', '\\_'], $searchData['name']), -1, PREG_SPLIT_NO_EMPTY);

            foreach ($keywords as $index => $keyword) {
                $key = sprintf('keyword%s', $index);
                $qb
                    ->andWhere(sprintf('NORMALIZE(p.name) LIKE NORMALIZE(:%s) OR
                        NORMALIZE(p.search_word) LIKE NORMALIZE(:%s) OR
                        EXISTS (SELECT wpc%d FROM \Eccube\Entity\ProductClass wpc%d WHERE p = wpc%d.Product AND NORMALIZE(wpc%d.code) LIKE NORMALIZE(:%s))',
                        $key, $key, $index, $index, $index, $index, $key))
                    ->setParameter($key, '%'.$keyword.'%');
            }
        }

        // Order By
        // 価格低い順
        $config = $this->eccubeConfig;
        if (!empty($searchData['orderby']) && $searchData['orderby']->getId() == $config['eccube_product_order_price_lower']) {
            //@see http://doctrine-orm.readthedocs.org/en/latest/reference/dql-doctrine-query-language.html
            $qb->addSelect('MIN(pc.price02) as HIDDEN price02_min');
            $qb->innerJoin('p.ProductClasses', 'pc');
            $qb->andWhere('pc.visible = true');
            $qb->groupBy('p.id');
            $qb->orderBy('price02_min', 'ASC');
            $qb->addOrderBy('p.id', 'DESC');
        // 価格高い順
        } elseif (!empty($searchData['orderby']) && $searchData['orderby']->getId() == $config['eccube_product_order_price_higher']) {
            $qb->addSelect('MAX(pc.price02) as HIDDEN price02_max');
            $qb->innerJoin('p.ProductClasses', 'pc');
            $qb->andWhere('pc.visible = true');
            $qb->groupBy('p.id');
            $qb->orderBy('price02_max', 'DESC');
            $qb->addOrderBy('p.id', 'DESC');
        // 新着順
        } elseif (!empty($searchData['orderby']) && $searchData['orderby']->getId() == $config['eccube_product_order_newer']) {
            // 在庫切れ商品非表示の設定が有効時対応
            // @see https://github.com/EC-CUBE/ec-cube/issues/1998
            if ($this->getEntityManager()->getFilters()->isEnabled('option_nostock_hidden') == true) {
                $qb->innerJoin('p.ProductClasses', 'pc');
                $qb->andWhere('pc.visible = true');
            }
            $qb->orderBy('p.create_date', 'DESC');
            $qb->addOrderBy('p.id', 'DESC');
        } else {
            if ($categoryJoin === false) {
                $qb
                    ->leftJoin('p.ProductCategories', 'pct')
                    ->leftJoin('pct.Category', 'c');
            }
            $qb
                ->addOrderBy('p.id', 'DESC');
        }

        //追加
        $LoginType = $LoginTypeInfo["LoginType"];
        $Customer = $LoginTypeInfo["Customer"];
        $ChainStore = $LoginTypeInfo["ChainStore"];
        $ContractType = $LoginTypeInfo["ContractType"];

        if(is_object($ContractType)){
            $ClassCategory = $ContractType->getClassCategory();
            
            if($ContractType->getShowProduct() != "Y"){
                $qb->andWhere('1 = 0');
            }

            if($ClassCategory){
                $qb->innerJoin('p.ProductClasses', 'pc1');
                $qb->andWhere('pc1.ClassCategory1 = :ClassCategory1')
                    ->setParameter('ClassCategory1', $ClassCategory);
            }
        }else{
            $ContractTypes = $this->getContractTypeListId();

            if(isset($ContractTypes) && count($ContractTypes) > 0){ 
                $qb->innerJoin('p.ProductClasses', 'pc1');
                $qb->andWhere('pc1.visible = true')
                    ->andWhere($qb->expr()->orX(
                        $qb->expr()->notIn('pc1.ClassCategory1', ':ClassCategory1'),
                        $qb->expr()->isNull('pc1.ClassCategory1')
                    ))
                    ->setParameter('ClassCategory1', $ContractTypes);

                $qb->andWhere($qb->expr()->orX(
                        $qb->expr()->notIn('pc1.ClassCategory2', ':ClassCategory2'),
                        $qb->expr()->isNull('pc1.ClassCategory2')
                    ))
                    ->setParameter('ClassCategory2', $ContractTypes);
            }
        }


        return $this->queries->customize(QueryKey::PRODUCT_SEARCH, $qb, $searchData);
    }

    /**
     * Find the Products with sorted ClassCategories.
     *
     * @param array $ids Product in ids
     * @param string $indexBy The index for the from.
     *
     * @return ArrayCollection|array
     */
    public function findProductsWithSortedClassCategoriesWithLoginTypeInfo(array $ids, $indexBy = null, array $LoginTypeInfo)
    {
        if (count($ids) < 1) {
            return [];
        }
        $qb = $this->createQueryBuilder('p', $indexBy);
        $qb->addSelect(['pc', 'cc1', 'cc2', 'pi', 'pt', 'tr', 'ps'])
            ->innerJoin('p.ProductClasses', 'pc')
            // XXX Joined 'TaxRule' and 'ProductStock' to prevent lazy loading
            ->leftJoin('pc.TaxRule', 'tr')
            ->innerJoin('pc.ProductStock', 'ps')
            ->leftJoin('pc.ClassCategory1', 'cc1')
            ->leftJoin('pc.ClassCategory2', 'cc2')
            ->leftJoin('p.ProductImage', 'pi')
            ->leftJoin('p.ProductTag', 'pt')
            ->where($qb->expr()->in('p.id', $ids))
            ->andWhere('pc.visible = :visible')
            ->setParameter('visible', true)
            ->orderBy('cc1.sort_no', 'DESC')
            ->addOrderBy('cc2.sort_no', 'DESC');

        //追加
        $LoginType = $LoginTypeInfo["LoginType"];
        $Customer = $LoginTypeInfo["Customer"];
        $ChainStore = $LoginTypeInfo["ChainStore"];
        $ContractType = $LoginTypeInfo["ContractType"];

        if(is_object($ContractType)){
            $ClassCategory = $ContractType->getClassCategory();
            
            if($ClassCategory){
                $qb->andWhere('pc.ClassCategory1 = :ClassCategory1')
                    ->setParameter('ClassCategory1', $ClassCategory);
            }
        }else{
            $ContractTypes = $this->getContractTypeListId();

            if(isset($ContractTypes) && count($ContractTypes) > 0){ 
                //$qb->andWhere($qb->expr()->notIn('pc.ClassCategory1', ':ClassCategory1'))
                //    ->orWhere($qb->expr()->isNull('pc.ClassCategory1'))

                $qb->andWhere('pc.visible = true')
                    ->andWhere($qb->expr()->orX(
                        $qb->expr()->notIn('pc.ClassCategory1', ':ClassCategory1'),
                        $qb->expr()->isNull('pc.ClassCategory1')
                    ))
                    ->setParameter('ClassCategory1', $ContractTypes);

                $qb->andWhere($qb->expr()->orX(
                        $qb->expr()->notIn('pc.ClassCategory2', ':ClassCategory2'),
                        $qb->expr()->isNull('pc.ClassCategory2')
                    ))
                    ->setParameter('ClassCategory2', $ContractTypes);

            }
        }

        $products = $qb
            ->getQuery()
            ->useResultCache(true, $this->eccubeConfig['eccube_result_cache_lifetime_short'])
            ->getResult();

        return $products;
    }

    private function getContractTypeListId()
    {
        $ContractTypeList = $this->contractTypeRepository->findBy(['is_hidden' => 'N']);
        $ContractTypes = [];

        foreach ($ContractTypeList as $ContractType) {
            $ClassCategory = $ContractType->getClassCategory();
            if($ClassCategory){
                $ContractTypes[] = $ClassCategory->getId();
            }
        }

        return $ContractTypes;
    }
}
