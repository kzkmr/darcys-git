<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Customize\Repository;

use Eccube\Repository\AbstractRepository;
use Eccube\Repository\QueryKey;
use Customize\Repository\Master\ContractTypeRepository;
use Eccube\Repository\ShippingRepository as BaseShippingRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Eccube\Common\EccubeConfig;
use Eccube\Doctrine\Query\Queries;
use Eccube\Entity\Shipping;
use Eccube\Entity\ProductStock;
use Eccube\Util\StringUtil;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * ShippingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShippingRepository extends AbstractRepository
{
    /**
     * @var Queries
     */
    protected $queries;

    /**
     * @var EccubeConfig
     */
    protected $eccubeConfig;

    /**
     * @var BaseShippingRepository
     */
    protected $baseShippingRepository;

    /**
     * @var ContractTypeRepository
     */
    protected $contractTypeRepository;

    /**
     * ShippingRepository constructor.
     *
     * @param RegistryInterface $registry
     * @param Queries $queries
     * @param EccubeConfig $eccubeConfig
     */
    public function __construct(
        RegistryInterface $registry,
        Queries $queries,
        EccubeConfig $eccubeConfig,
        BaseShippingRepository $baseShippingRepository,
        ContractTypeRepository $contractTypeRepository
    ) {
        parent::__construct($registry, Shipping::class);
        $this->queries = $queries;
        $this->eccubeConfig = $eccubeConfig;
        $this->baseShippingRepository = $baseShippingRepository;
        $this->contractTypeRepository = $contractTypeRepository;
    }


    /**
     * クーポン売上履歴(YM)
     *
     * @param string $ChainStore
     *
     * @return array
     */
    public function getChainStoreUseCouponJissekiListDate($ChainStore)
    {
        $result = $this->createQueryBuilder('s')
            ->select("DISTINCT DATE_FORMAT(s.shipping_date, '%Y-%m') AS dateVal, DATE_FORMAT(s.shipping_date, '%Y年%m月')  AS dateName")
            ->innerJoin('s.Order', 'o')
            ->innerJoin('Plugin\Coupon4\Entity\CouponOrder', 'co', \Doctrine\ORM\Query\Expr\Join::WITH, 'co.order_id = o.id')
            ->innerJoin('Plugin\Coupon4\Entity\Coupon', 'c', \Doctrine\ORM\Query\Expr\Join::WITH, 'co.coupon_id = c.id')
            ->where("c.ChainStore=:ChainStore")
            ->andWhere("o.OrderStatus = 5")
            ->orderBy("s.shipping_date",  "DESC")
            ->setParameter('ChainStore', $ChainStore)
            ->getQuery();

        $result = $result->getResult();
        return $result;
    }

    /**
     * 販売店購入可能金額の表示
     *
     * @param string $ChainStore
     *
     * @return array
     */
    public function findChainStoreBalancePrice($ChainStore, $YM)
    {
        $sql = "SELECT SUM(payment_total) payment_total
                FROM dtb_order o LEFT JOIN dtb_customer c ON o.customer_id = c.id
                WHERE o.order_status_id NOT IN(3,8)
                    AND DATE_FORMAT(o.create_date, '%Y-%m') = ?
                    AND c.chain_store_id = ?";

        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('payment_total', 'payment_total');

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        $query->setParameter(1, $YM);
        $query->setParameter(2, $ChainStore->getId());

        $result = $query->getResult();

        return $result;
    }

    /**
     * クーポン売上履歴
     *
     * @param string $ChainStore
     *
     * @return array
     */
    public function findChainStoreUseCouponJisseki($ChainStore, $YM)
    {
        /*
        $qb = $this->createQueryBuilder('s');

        $qb->select("  c.coupon_id AS coupon_id,
                        c.coupon_name AS coupon_name,
                        SUM(co.discount)/COUNT(o.id) AS discount,
                        SUM(o.total-o.delivery_fee_total-o.charge-o.tax)/COUNT(o.id) AS total
                         ")
            ->innerJoin('s.Order', 'o')
            ->innerJoin('Plugin\Coupon4\Entity\CouponOrder', 'co', \Doctrine\ORM\Query\Expr\Join::WITH, 'co.order_id = o.id')
            ->innerJoin('Plugin\Coupon4\Entity\Coupon', 'c', \Doctrine\ORM\Query\Expr\Join::WITH, 'co.coupon_id = c.id')
            ->where("c.ChainStore=:ChainStore")
            ->andWhere("o.OrderStatus = 5")
            ->andWhere("DATE_FORMAT(s.shipping_date, '%Y-%m') = :selectedYM")
            ->groupBy("c.coupon_id, c.coupon_name, o.id")
            ->orderBy("s.shipping_date",  "DESC")
            ->setParameter('ChainStore', $ChainStore)
            ->setParameter('selectedYM', $YM);



        $tq = $this->getEntityManager()->createQueryBuilder($qb->getDQL());
        $tq->select(" t.coupon_id, 
                      t.coupon_name, 
                      COUNT(t.coupon_id) AS coupon_cnt, 
                      SUM(discount) AS discount, 
                      SUM(total) AS total ")
            ->groupBy("t.coupon_id, t.coupon_name");

        $tq = $tq->getQuery();
        $result = $tq->getResult();
        */

        //$conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT c.coupon_id, c.coupon_name, COUNT(c.coupon_id) coupon_cnt, SUM(discount) discount, SUM(total) total
                FROM (
                        SELECT c.coupon_id, c.coupon_name, SUM(co.discount)/COUNT(o.id) discount, SUM((o.subtotal))/COUNT(o.id) total
                        FROM `dtb_shipping` s 
                                INNER JOIN (
                                    SELECT oo.id, oo.order_status_id, SUM(oi.price * oi.quantity) subtotal, SUM(oi.tax) taxtotal
                                      FROM dtb_order oo LEFT JOIN dtb_order_item oi ON oo.id = oi.order_id
                                                  LEFT JOIN dtb_product p ON oi.product_id = p.id
                                     WHERE oi.order_item_type_id = 1
                                       AND p.option_margin_activate = 1
                                   GROUP BY oi.order_id, oo.order_status_id
                                ) o ON s.order_id = o.id
                                INNER JOIN plg_coupon_order co ON o.id = co.order_id
                                INNER JOIN plg_coupon c ON co.coupon_id = c.coupon_id
                        WHERE o.order_status_id = 5
                          AND DATE_FORMAT(s.shipping_date, '%Y-%m') = ?
                          AND c.chain_store_id = ?
                        GROUP BY c.coupon_id, c.coupon_name, o.id
                    ) c
                GROUP BY c.coupon_id, c.coupon_name";
        //$stmt = $conn->prepare($sql);
        //return $stmt->execute();
        //$rsm = new ResultSetMapping;
        //$rsm->addEntityResult('Plugin\Coupon4\Entity\Coupon', 'c');
        //$rsm->addFieldResult('c', 'coupon_id', 'coupon_id');
        //$rsm->addFieldResult('c', 'coupon_name', 'coupon_name');
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('coupon_id', 'coupon_id');
        $rsm->addScalarResult('coupon_name', 'coupon_name');
        $rsm->addScalarResult('coupon_cnt', 'coupon_cnt');
        $rsm->addScalarResult('total', 'total');

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        $query->setParameter(1, $YM);
        $query->setParameter(2, $ChainStore->getId());

        $result = $query->getResult();

        return $result;
    }

    /**
     * 販売店契約、応援プログラム向けマージン計算
     *
     * @param string $calcYM
     *
     * @return array
     */
    public function findCalcMarginList($calcYM)
    {
        $sql = "WITH base AS (
                    /* 本販売店のみ */
                    SELECT c.id, company_name, stock_number, ct.name AS contract_type_name, contract_type_id, margin_not_included
                    FROM   dtb_chain_store c INNER JOIN mtb_contract_type ct ON c.contract_type_id = ct.id
                    WHERE  c.chain_store_status_id = 2
                    UNION
                    SELECT 'SYS', '未登録', NULL, NULL, NULL, false
                ), coupon AS (
                    /* 販売店契約と販売店契約（応援プログラム適用）のみ */
                    SELECT IFNULL(sum_coupon.chain_store_id, 'SYS') AS chain_store_id,
                            sum_coupon.contract_type_id,
                            SUM(CASE WHEN sum_coupon.contract_type_id = 1 OR sum_coupon.contract_type_id = 2 OR sum_coupon.contract_type_id IS NULL THEN
                                sum_coupon.coupon_total
                            ELSE
                                0
                            END)  AS coupon_total
                    FROM   base LEFT JOIN (
                        SELECT c.chain_store_id
                                ,cs.contract_type_id
                                ,FLOOR(SUM((o.subtotal))/COUNT(o.id)) coupon_total
                        FROM `dtb_shipping` s 
                                INNER JOIN (
                                        SELECT oo.id, oo.customer_id, oo.order_status_id, SUM(oi.price * oi.quantity) subtotal, SUM(oi.tax) taxtotal
                                        FROM dtb_order oo LEFT JOIN dtb_order_item oi ON oo.id = oi.order_id
                                                LEFT JOIN dtb_product p ON oi.product_id = p.id
                                        WHERE oi.order_item_type_id = 1
                                          AND p.option_margin_activate = 1
                                    GROUP BY oi.order_id, oo.customer_id, oo.order_status_id
                                    ) o ON s.order_id = o.id
                                LEFT JOIN plg_coupon_order co ON o.id = co.order_id
                                LEFT JOIN plg_coupon c ON co.coupon_id = c.coupon_id
                                LEFT JOIN dtb_chain_store cs ON c.chain_store_id = cs.id
                        WHERE o.order_status_id = 5
                          AND DATE_FORMAT(s.shipping_date, '%Y-%m') = ? 
                        GROUP BY c.chain_store_id, cs.contract_type_id, o.id
                    ) sum_coupon ON base.id = sum_coupon.chain_store_id OR sum_coupon.chain_store_id IS NULL
                    GROUP BY sum_coupon.chain_store_id, sum_coupon.contract_type_id
                ), chain AS (
                    SELECT c.chain_store_id
                            , cs.contract_type_id
                            ,FLOOR(SUM(o.payment_total)) AS self_total
                    FROM `dtb_shipping` s 
                            INNER JOIN dtb_order o ON s.order_id = o.id
                            INNER JOIN dtb_customer c ON o.customer_id = c.id
                            INNER JOIN dtb_chain_store cs ON c.chain_store_id = cs.id
                    WHERE o.order_status_id = 5
                    AND DATE_FORMAT(s.shipping_date, '%Y-%m') = ?
                    GROUP BY c.chain_store_id
                ), chain_notax AS (
                    SELECT c.chain_store_id
                            , cs.contract_type_id
                            ,FLOOR(SUM(o.subtotal)) AS self_total
                    FROM `dtb_shipping` s 
                            INNER JOIN (
                                    SELECT oo.id, oo.customer_id, oo.order_status_id, SUM(oi.price * oi.quantity) subtotal, SUM(oi.tax) taxtotal
                                    FROM dtb_order oo LEFT JOIN dtb_order_item oi ON oo.id = oi.order_id
                                            LEFT JOIN dtb_product p ON oi.product_id = p.id
                                    WHERE oi.order_item_type_id = 1
                                        AND p.option_margin_activate = 1
                                    GROUP BY oi.order_id, oo.customer_id, oo.order_status_id
                                ) o ON s.order_id = o.id
                            INNER JOIN dtb_customer c ON o.customer_id = c.id
                            INNER JOIN dtb_chain_store cs ON c.chain_store_id = cs.id
                    WHERE o.order_status_id = 5
                    AND DATE_FORMAT(s.shipping_date, '%Y-%m') = ?
                    GROUP BY c.chain_store_id
                ), chain_total AS (
                    /* 小売店契約のみ */
                    SELECT SUM(self_total) total
                    FROM   chain
                    WHERE  contract_type_id = 3
                ), chain_total_notax AS (
                    /* 小売店契約のみ */
                    SELECT SUM(self_total) total
                    FROM   chain_notax
                    WHERE  contract_type_id = 3
                ), support_cnt AS (
                    SELECT COUNT(id) cnt
                    FROM   base
                    WHERE  contract_type_id = 2
                ), result AS (
                    SELECT base.*,
                        SUM(coupon.coupon_total) AS coupon_total,
                            CASE WHEN base.id = 'SYS' THEN
                                0
                            ELSE
                                FLOOR(SUM(coupon.coupon_total) * 0.1)
                            END AS coupon_margin,
                            CASE WHEN base.contract_type_id = 3 THEN
                                SUM(chain.self_total) 
                            ELSE
                                0
                            END AS kouri_self_total,
                            CASE WHEN base.contract_type_id = 2 THEN
                                SUM(chain.self_total)
                            ELSE
                                0
                            END AS oen_self_total,                            
                            CASE WHEN base.contract_type_id = 1 THEN
                                SUM(chain.self_total) 
                            ELSE
                                0
                            END AS self_total,
                            CASE WHEN base.contract_type_id = 2 THEN
                                /* マージン対象外 */
                                CASE WHEN base.margin_not_included THEN
                                    0
                                ELSE
                                    /* 最低保証額に満たない場合は必ず「15,000円」をマージンとする。 */
                                    CASE WHEN FLOOR(SUM((chain_total_notax.total * 0.03) / support_cnt.cnt)) >= 15000 THEN
                                        FLOOR(SUM((chain_total_notax.total * 0.03) / support_cnt.cnt))
                                    ELSE
                                        15000
                                    END
                                END
                            ELSE
                                0
                            END AS support_total
                    FROM   base
                            LEFT JOIN coupon ON base.id = coupon.chain_store_id
                            LEFT JOIN chain ON base.id = chain.chain_store_id
                            LEFT JOIN chain_total ON 1 = 1
                            LEFT JOIN chain_total_notax ON 1 = 1
                            LEFT JOIN support_cnt ON 1 = 1
                    WHERE (coupon_total != 0
                            OR self_total != 0)
                        OR base.contract_type_id = 2
                    GROUP BY base.id, base.company_name, base.stock_number, base.contract_type_name
                    ORDER BY base.contract_type_name, base.company_name
                )

                SELECT result.*,
                        (IFNULL(result.coupon_margin,0) + IFNULL(result.support_total,0)) AS margin_total
                FROM   result
         ";

        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('id', 'id');
        $rsm->addScalarResult('company_name', 'company_name');
        $rsm->addScalarResult('stock_number', 'stock_number');
        $rsm->addScalarResult('contract_type_name', 'contract_type_name');
        $rsm->addScalarResult('coupon_total', 'coupon_total');
        $rsm->addScalarResult('coupon_margin', 'coupon_margin');
        $rsm->addScalarResult('self_total', 'self_total');
        $rsm->addScalarResult('oen_self_total', 'oen_self_total');
        $rsm->addScalarResult('kouri_self_total', 'kouri_self_total');
        $rsm->addScalarResult('support_total', 'support_total');
        $rsm->addScalarResult('margin_total', 'margin_total');

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        $query->setParameter(1, $calcYM);
        $query->setParameter(2, $calcYM);
        $query->setParameter(3, $calcYM);

        $result = $query->getResult();

        return $result;
    }

    /**
     * ディーラー向けマージン計算
     *
     * @param string $calcYM
     *
     * @return array
     */
    public function findCalcDealerList($calcYM){
        $sql = "WITH base AS (
                    /* 本販売店のみ */
                    SELECT c.id, c.dealer_code, c.company_name, c.stock_number, ct.name AS contract_type_name, contract_type_id
                    FROM   dtb_chain_store c INNER JOIN mtb_contract_type ct ON c.contract_type_id = ct.id
                    WHERE  c.chain_store_status_id = 2
                    UNION
                    SELECT 'SYS', NULL, '未登録', NULL, NULL, NULL
                ), sales AS (
                    /* 販売店契約と販売店契約（応援プログラム適用）のみ */
                    SELECT IFNULL(sum_sales.chain_store_id, 'SYS') AS chain_store_id,
                            sum_sales.contract_type_id,
                            SUM(CASE WHEN contract_type_id = 1 OR contract_type_id = 2 OR contract_type_id IS NULL THEN
                            sum_sales.sales_total
                            ELSE
                                0
                            END)  AS sales_total
                    FROM   (
                        SELECT c.chain_store_id
                                ,cs.contract_type_id
                                ,FLOOR(SUM((o.subtotal))/COUNT(o.id)) sales_total
                        FROM `dtb_shipping` s 
                                INNER JOIN (
                                        SELECT oo.id, oo.customer_id, oo.order_status_id, SUM(oi.price * oi.quantity) subtotal, SUM(oi.tax) taxtotal
                                        FROM dtb_order oo LEFT JOIN dtb_order_item oi ON oo.id = oi.order_id
                                                        LEFT JOIN dtb_product p ON oi.product_id = p.id
                                        WHERE oi.order_item_type_id = 1
                                          AND p.option_margin_activate = 1
                                    GROUP BY oi.order_id, oo.customer_id, oo.order_status_id
                                    ) o ON s.order_id = o.id
                                LEFT JOIN plg_coupon_order co ON o.id = co.order_id
                                LEFT JOIN plg_coupon c ON co.coupon_id = c.coupon_id
                                LEFT JOIN dtb_chain_store cs ON c.chain_store_id = cs.id
                        WHERE o.order_status_id = 5
                        AND DATE_FORMAT(s.shipping_date, '%Y-%m') = ?
                        GROUP BY c.chain_store_id, cs.contract_type_id, o.id
                    ) sum_sales
                    GROUP BY sum_sales.chain_store_id, sum_sales.contract_type_id
                ), chain AS (
                    SELECT c.chain_store_id
                            , cs.contract_type_id
                            ,FLOOR(SUM(o.payment_total)) AS self_total
                    FROM `dtb_shipping` s 
                            INNER JOIN dtb_order o ON s.order_id = o.id
                            INNER JOIN dtb_customer c ON o.customer_id = c.id
                            INNER JOIN dtb_chain_store cs ON c.chain_store_id = cs.id
                    WHERE o.order_status_id = 5
                    AND DATE_FORMAT(s.shipping_date, '%Y-%m') = ?
                    GROUP BY c.chain_store_id
                ), chain_notax AS (
                    SELECT c.chain_store_id
                            , cs.contract_type_id
                            ,FLOOR(SUM(o.subtotal)) AS self_total
                    FROM `dtb_shipping` s 
                            INNER JOIN (
                                      SELECT oo.id, oo.customer_id, oo.order_status_id, SUM(oi.price * oi.quantity) subtotal, SUM(oi.tax) taxtotal
                                        FROM dtb_order oo LEFT JOIN dtb_order_item oi ON oo.id = oi.order_id
                                                        LEFT JOIN dtb_product p ON oi.product_id = p.id
                                        WHERE oi.order_item_type_id = 1
                                          AND p.option_margin_activate = 1
                                     GROUP BY oi.order_id, oo.customer_id, oo.order_status_id
                                ) o ON s.order_id = o.id
                            INNER JOIN dtb_customer c ON o.customer_id = c.id
                            INNER JOIN dtb_chain_store cs ON c.chain_store_id = cs.id
                    WHERE o.order_status_id = 5
                    AND DATE_FORMAT(s.shipping_date, '%Y-%m') = ?
                    GROUP BY c.chain_store_id
                ), result AS (
                    SELECT base.*,
                        SUM(sales.sales_total) AS sales_total,
                            CASE WHEN base.id = 'SYS' THEN
                                0
                            ELSE
                                FLOOR(SUM(sales.sales_total) * 0.03)
                            END AS sales_margin,
                            CASE WHEN base.contract_type_id = 3 THEN
                                SUM(chain_notax.self_total) 
                            ELSE
                                0
                            END AS kouri_self_total,
                            CASE WHEN base.contract_type_id = 2 THEN
                                0 /* SUM(chain.self_total)  */
                            ELSE
                                0
                            END AS oen_self_total,
                            CASE WHEN base.contract_type_id = 1 THEN
                                SUM(chain_notax.self_total) 
                            ELSE
                                0
                            END AS self_total,
                            CASE WHEN base.contract_type_id = 1 THEN
                                FLOOR(SUM(chain_notax.self_total) * 0.03)
                            ELSE
                                0
                            END AS chain_total
                    FROM   base
                            LEFT JOIN sales ON base.id = sales.chain_store_id
                            LEFT JOIN chain ON base.id = chain.chain_store_id
                            LEFT JOIN chain_notax ON base.id = chain_notax.chain_store_id
                    WHERE sales_total != 0
                    OR chain.self_total != 0
                    GROUP BY base.id, base.dealer_code, base.company_name, base.stock_number, base.contract_type_name
                    ORDER BY base.contract_type_name, base.company_name
                )

                SELECT result.*,
                        (IFNULL(result.sales_margin,0) + IFNULL(result.chain_total, 0)) AS margin_total
                FROM   result
        ";

        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('id', 'id');
        $rsm->addScalarResult('dealer_code', 'dealer_code');
        $rsm->addScalarResult('company_name', 'company_name');
        $rsm->addScalarResult('stock_number', 'stock_number');
        $rsm->addScalarResult('contract_type_name', 'contract_type_name');
        $rsm->addScalarResult('sales_total', 'sales_total');
        $rsm->addScalarResult('sales_margin', 'sales_margin');
        $rsm->addScalarResult('self_total', 'self_total');
        $rsm->addScalarResult('oen_self_total', 'oen_self_total');
        $rsm->addScalarResult('kouri_self_total', 'kouri_self_total');
        $rsm->addScalarResult('chain_total', 'chain_total');
        $rsm->addScalarResult('margin_total', 'margin_total');

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        $query->setParameter(1, $calcYM);
        $query->setParameter(2, $calcYM);
        $query->setParameter(3, $calcYM);

        $result = $query->getResult();

        return $result;
    }
}
