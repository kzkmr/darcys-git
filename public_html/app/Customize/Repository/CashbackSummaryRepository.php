<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Customize\Repository;

use \DatePeriod;
use \DateTime;
use \DateInterval;
use Customize\Entity\CashbackSummary;
use Eccube\Repository\AbstractRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Eccube\Doctrine\Query\Queries;
use Eccube\Util\StringUtil;

/**
 * CashbackSummaryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CashbackSummaryRepository extends AbstractRepository
{
    /**
     * @var Queries
     */
    protected $queries;

    /**
     * OrderRepository constructor.
     *
     * @param RegistryInterface $registry
     * @param Queries $queries
     */
    public function __construct(RegistryInterface $registry, Queries $queries)
    {
        parent::__construct($registry, CashbackSummary::class);
        $this->queries = $queries;
    }


    public function getQueryBuilderBySearchData($searchData)
    {
        $qb = $this->createQueryBuilder('c')
            ->select("  cus.name01,
                        cus.name02,
                        IDENTITY(c.Customer) customerId, 
                        c.referenceDate,
                        SUM(c.exportCnt) AS export_Cnt,
                        SUM(c.finalAmt) AS final_Amt
                        ")
            ->join('c.Customer', 'cus')
            ->leftJoin('cus.BankName', 'bank');

        if (isset($searchData['multi']) && StringUtil::isNotBlank($searchData['multi'])) {
            //スペース除去
            $clean_key_multi = preg_replace('/\s+|[　]+/u', '', $searchData['multi']);
            $id = preg_match('/^\d{0,10}$/', $clean_key_multi) ? $clean_key_multi : null;
            if ($id && $id > '2147483647' && $this->isPostgreSQL()) {
                $id = null;
            }
            $qb
                ->andWhere('cus.id = :customer_id OR CONCAT(cus.name01, cus.name02) LIKE :name OR CONCAT(cus.kana01, cus.kana02) LIKE :kana OR cus.email LIKE :email')
                ->setParameter('customer_id', $id)
                ->setParameter('name', '%'.$clean_key_multi.'%')
                ->setParameter('kana', '%'.$clean_key_multi.'%')
                ->setParameter('email', '%'.$clean_key_multi.'%');
        }

        if (!empty($searchData['cb_month']) && $searchData['cb_month']) {
            $qb
            ->andWhere('c.referenceDate = :reference_date')
            ->setParameter('reference_date', $searchData['cb_month']);
        }

        if (!empty($searchData['cb_is_read']) && $searchData['cb_is_read']) {
            if($searchData['cb_is_read'] == "Y"){
                $qb
                ->andWhere('c.exportCnt >= 1');
            }else{
                $qb
                ->andWhere('c.exportCnt <= 0');
            }
        }

        // Pref
        if (!empty($searchData['pref']) && $searchData['pref']) {
            $qb
                ->andWhere('cus.Pref = :pref')
                ->setParameter('pref', $searchData['pref']->getId());
        }

        // sex
        if (!empty($searchData['sex']) && count($searchData['sex']) > 0) {
            $sexs = [];
            foreach ($searchData['sex'] as $sex) {
                $sexs[] = $sex->getId();
            }

            $qb
                ->andWhere($qb->expr()->in('cus.Sex', ':sexs'))
                ->setParameter('sexs', $sexs);
        }

        if (!empty($searchData['birth_month']) && $searchData['birth_month']) {
            $qb
                ->andWhere('EXTRACT(MONTH FROM cus.birth) = :birth_month')
                ->setParameter('birth_month', $searchData['birth_month']);
        }

        // birth
        if (!empty($searchData['birth_start']) && $searchData['birth_start']) {
            $qb
                ->andWhere('cus.birth >= :birth_start')
                ->setParameter('birth_start', $searchData['birth_start']);
        }
        if (!empty($searchData['birth_end']) && $searchData['birth_end']) {
            $date = clone $searchData['birth_end'];
            $date->modify('+1 days');
            $qb
                ->andWhere('cus.birth < :birth_end')
                ->setParameter('birth_end', $date);
        }

        // tel
        if (isset($searchData['phone_number']) && StringUtil::isNotBlank($searchData['phone_number'])) {
            $tel = preg_replace('/[^0-9]/ ', '', $searchData['phone_number']);
            $qb
                ->andWhere('cus.phone_number LIKE :phone_number')
                ->setParameter('phone_number', '%'.$tel.'%');
        }
        
        $qb->andWhere("cus.BankName IS NOT NULL");
        $qb->andWhere("cus.BankName != 0");
        $qb->andWhere("cus.BankBranchCode IS NOT NULL");
        $qb->andWhere("cus.BankBranchCode != 0");
        $qb->andWhere("cus.BankAccount != ''");
        $qb->andWhere("cus.BankHolder != ''");
        $qb->andWhere("c.finalAmt > 0");
        $qb->andWhere("cus.Status = 2");
        $qb->groupBy("cus.name01, cus.name02, c.Customer, c.referenceDate ");
        // Order By 
        //$qb->addOrderBy('cus.id', 'ASC');

        return $qb;
    }

    public function getCustomizeBySearchData($searchData){
        $result = $this->getQueryBuilderBySearchData($searchData);
        return $this->queries->customize(QueryKey::CUSTOMER_SEARCH, $result, $searchData);
    }

    public function getResultBySearchData($searchData){
        $result = $this->getQueryBuilderBySearchData($searchData);
        $result = $result->getQuery()->getResult();

        return $result;
    }

    public function getListDateByAll()
    {
        $result = $this->createQueryBuilder('o')
            ->select("DISTINCT o.referenceDate AS dateVal, CONCAT(REPLACE(o.referenceDate, '-', '年'), '月')  AS dateName")
            ->where('o.referenceDate != :referenceDate')
            ->setParameter('referenceDate', date("Y-m"))
            ->orderBy("o.referenceDate",  "DESC")
            ->getQuery();

        $result = $result->getResult();

        return $result;
    }

    /**
     * @param  \Customize\Entity\ChainStore $ChainStore
     *
     * @return Result
     */
    public function getDateList(\Customize\Entity\ChainStore $ChainStore)
    {
        $result = $this->createQueryBuilder('o')
            ->select("DISTINCT o.referenceYm AS dateVal, CONCAT(REPLACE(o.referenceYm, '-', '年'), '月')  AS dateName")
            ->where('o.ChainStore = :ChainStore')
            ->orderBy("o.referenceYm",  "DESC")
            ->setParameter('ChainStore', $ChainStore)
            ->getQuery();

        $result = $result->getResult();

        return $result;
    }


    /** 
     * @param  String selectedYM --OK
     *
     * @return QueryBuilder 
     */
    public function deleteByYM($selectedYM)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->delete('Customize\Entity\CashbackSummary', 's')
            ->where("s.referenceYm = :selectedYM  ")
            ->setParameter('selectedYM', $selectedYM)
            ->getQuery();
        
        $result = $qb->execute();

        return $result;
    }
}
