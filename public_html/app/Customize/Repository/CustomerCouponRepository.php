<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Customize\Repository;

use Eccube\Repository\AbstractRepository;
use Eccube\Common\Constant;
use Doctrine\DBAL\Exception\DriverException;
use Doctrine\DBAL\Exception\ForeignKeyConstraintViolationException;
use Eccube\Common\EccubeConfig;
use Eccube\Entity\Customer;
use Plugin\Coupon4\Entity\Coupon;
use Customize\Entity\CustomerCoupon;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * CustomerCouponRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerCouponRepository extends AbstractRepository
{
    /**
     * @var EccubeConfig
     */
    protected $eccubeConfig;

    /**
     * CustomerCouponRepository constructor.
     *
     * @param RegistryInterface $registry
     * @param EccubeConfig $eccubeConfig
     */
    public function __construct(
        RegistryInterface $registry,
        EccubeConfig $eccubeConfig
    ) {
        parent::__construct($registry, CustomerCoupon::class);
        $this->eccubeConfig = $eccubeConfig;
    }

    /**
     * 会員のクーポンを保存する.
     *
     * @param  CustomerCoupon $CustomerCoupon 会員のクーポン
     */
    public function save($CustomerCoupon)
    {
        $em = $this->getEntityManager();
        $em->persist($CustomerCoupon);
        $em->flush();
    }

    /**
     * 有効なクーポンを取得する.
     *
     * @param $couponCd
     *
     * @return $result
     */
    public function findActiveCouponList(Customer $Customer)
    {
        if($Customer == null) return null;
        if($Customer->getId() == "" || $Customer->getId() == null) return null;

        $currenDateTime = new \DateTime();

        // 時分秒を0に設定する
        $currenDateTime->setTime(0, 0, 0);

        $qb = $this->createQueryBuilder('o')
            ->select('o, c')
            ->innerJoin('o.Coupon', 'c');

        // Customer
        $qb->andWhere('o.Customer = :Customer')
            ->setParameter('Customer', $Customer);

        // クーポンコード有効
        $qb->andWhere('c.enable_flag = :enable_flag')
            ->setParameter('enable_flag', Constant::ENABLED);

        // 有効期間(FROM)
        $qb->andWhere('c.available_from_date <= :cur_date_time OR c.available_from_date IS NULL')
            ->setParameter('cur_date_time', $currenDateTime);

        // 有効期間(TO)
        $qb->andWhere(':cur_date_time <= c.available_to_date OR c.available_to_date IS NULL')
            ->setParameter('cur_date_time', $currenDateTime);

        // Order By
        $qb->orderBy('c.discount_rate', 'DESC');
        $qb->addorderBy('c.discount_price', 'DESC');
        $qb->addorderBy('o.create_date', 'DESC');
        $qb->addorderBy('o.id', 'DESC');

        // 実行
        $results = $qb->getQuery()->getResult();
   
        return $results;
    }

    /**
     * 会員のクーポンを削除する.
     *
     * @param  CustomerCoupon $CustomerCoupon 削除対象の会員のクーポン
     *
     * @throws ForeignKeyConstraintViolationException 外部キー制約違反の場合
     * @throws DriverException SQLiteの場合, 外部キー制約違反が発生すると, DriverExceptionをthrowします.
     */
    public function delete($CustomerCoupon)
    {
        $em = $this->getEntityManager();
        $em->remove($CustomerCoupon);
        $em->flush();
    }
}
