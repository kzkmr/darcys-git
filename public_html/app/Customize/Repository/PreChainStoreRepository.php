<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Customize\Repository;

use Eccube\Repository\OrderRepository;
use Eccube\Repository\AbstractRepository;
use Doctrine\ORM\EntityManagerInterface;
use Eccube\Common\EccubeConfig;
use Eccube\Doctrine\Query\Queries;
use Customize\Entity\PreChainStore;
use Customize\Entity\Master\ChainStoreStatus;
use Eccube\Entity\Master\OrderStatus;
use Eccube\Util\StringUtil;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Symfony\Component\Security\Core\Encoder\EncoderFactoryInterface;

/**
 * PreChainStoreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PreChainStoreRepository extends AbstractRepository
{
    /**
     * @var Queries
     */
    protected $queries;

    /**
     * @var EntityManagerInterface
     */
    protected $entityManager;

    /**
     * @var OrderRepository
     */
    protected $orderRepository;

    /**
     * @var EccubeConfig
     */
    protected $eccubeConfig;

    /**
     * @var EncoderFactoryInterface
     */
    protected $encoderFactory;

    /**
     * PreChainStoreRepository constructor.
     *
     * @param RegistryInterface $registry
     * @param Queries $queries
     * @param EntityManagerInterface $entityManager
     * @param OrderRepository $orderRepository
     * @param EncoderFactoryInterface $encoderFactory
     * @param EccubeConfig $eccubeConfig
     */
    public function __construct(
        RegistryInterface $registry,
        Queries $queries,
        EntityManagerInterface $entityManager,
        OrderRepository $orderRepository,
        EncoderFactoryInterface $encoderFactory,
        EccubeConfig $eccubeConfig
    ) {
        parent::__construct($registry, PreChainStore::class);

        $this->queries = $queries;
        $this->entityManager = $entityManager;
        $this->orderRepository = $orderRepository;
        $this->encoderFactory = $encoderFactory;
        $this->eccubeConfig = $eccubeConfig;
    }

    /**
     * 有効な事前情報を取得する.
     *
     * @param $email
     * @param $birthday
     *
     * @return $result
     */
    public function findActiveRegisterInfo($contractId, $email, $birthday)
    {
        $email = trim($email);

        //$dtBirthday = new \DateTime($birthday);
        // 時分秒を0に設定する
        //$dtBirthday->setTime(0, 0, 0);

        $qb = $this->createQueryBuilder('o')
            ->select('o')
            // contractId
            ->andWhere('o.ContractType = :contractId')
            ->setParameter('contractId', $contractId)

            // email
            ->andWhere('LOWER(o.email) = LOWER(:email)')
            ->setParameter('email', $email)

            // birthday
            ->andWhere('o.birthday = :birthday')
            ->setParameter('birthday', $birthday);

        // 実行
        $results = $qb->getQuery()->getResult();
   
        return $results;
    }
}
